#include<iostream>
using namespace std;

struct stDate
{
	short Day;
	short Month;
	short Year;
};

struct stPeriod
{
	stDate StartDate;
	stDate EndDate;
};

short ReadYear()
{
	short Year;
	cout << "Please Enter a Year ? ";
	cin >> Year;
	return Year;
}

short ReadMonth()
{
	short Month;
	cout << "Please Enter a Month ? ";
	cin >> Month;
	return Month;
}

short ReadDay()
{
	short Day;
	cout << "Please Enter a Day ? ";
	cin >> Day;
	return Day;
}

stDate ReadFullDate()
{
	stDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}

bool IsDate1BeforeDate2(stDate& Date1, stDate& Date2)
{
	return (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? ((Date1.Month < Date2.Month) ? true : (Date1.Month == Date2.Month) ? (Date1.Day < Date2.Day) : false) : false);
}

bool IsDate1EqualToDate2(stDate& Date1, stDate& Date2)
{
	return (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;
}

bool IsDate1AfterDate2(stDate& Date1, stDate& Date2)
{
	return (!IsDate1BeforeDate2(Date1, Date2) && !IsDate1EqualToDate2(Date1, Date2));
}

enum enDateCompare { Before = -1, Equal = 0, After = 1 };

enDateCompare CompareDates(stDate& Date1, stDate& Date2)
{
	if (IsDate1BeforeDate2(Date1, Date2))
		return enDateCompare::Before;
	else if (IsDate1EqualToDate2(Date1, Date2))
		return enDateCompare::Equal;

		return enDateCompare::After;
}

stPeriod ReadPeriod()
{
	stPeriod Period;

	cout << "Enter Start Date :\n\n";
	Period.StartDate = ReadFullDate();

	cout << "\nEnter End Date :\n\n";
	Period.EndDate = ReadFullDate();

	return Period;
}

bool IsOverLapPeriods(stPeriod Period1, stPeriod Period2)
{
	if (CompareDates(Period2.EndDate, Period1.StartDate) == enDateCompare::Before
		|| CompareDates(Period2.StartDate, Period1.EndDate) == enDateCompare::After)
		return false;
	else
		return true;
}

int main()
{
	cout << "Enter Period 1 :\n";
	stPeriod Period1 = ReadPeriod();

	cout << "\nEnter Period 2 :\n";
	stPeriod Period2 = ReadPeriod();


	if (IsOverLapPeriods(Period1, Period2))
		cout << "\nYes, Periods Overlap\n";
	else
		cout << "\nNo, Periods Do NOT Overlap\n";

	system("pause>0");
	return 0;
}